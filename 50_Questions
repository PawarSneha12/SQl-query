//Sql question 

create DATABASE ORG;

USE ORG;
-- show DATABASES;
CREATE TABLE  Workers(
w_id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
f_name CHAR(25),
l_name CHAR(25),
salary INT(15),
joiningDate DATETIME,
DEPARTMENT CHAR(15)
);
INSERT INTO Workers(w_id,f_name,l_name,salary,joiningDate,DEPARTMENT) VALUES 
(01,'MONIK','ARORA',100000,'14-02-20 09.00.00','HR'),
(02,'NIHAR','VERMA',80000,'14-06,11 09.00.00','Admin'),
(03,'VISHA','SINGHAL',300000,'14-02-20 09.00.00','HR'),
(04,'AMITAbh','SINGH',500000,'14-02-20 09.00.00','Adminastation'),
(05,'VIVEK','BHATI',500000,'14-06,11 09.00.00','Admin'),
(06,'VIPUL','DIWAN',200000,'14-06,11 09.00.00','Acoount'),
(07,'SATISH','KUMAR',75000,'14-01,20 09.00.00','Acoount'),
(08,'GITIKA','CHOHAN',90000,'14-04,11 09.00.00','Admin');
-- SELECT * FROM Workers;

create TABLE BonusT(
wRef_id INT,
Bonus_Amount INT(15),
Bonus_Date DATETIME,
FOREIGN KEY (wRef_id) 
REFERENCES Workers(w_id) ON DELETE CASCADE
);
INSERT INTO BonusT (wRef_id,Bonus_Amount,Bonus_Date) VALUES 
(01,5000,'16-02-20'),
(02,3000,'16-06-11'),
(03,4000,'16-02-20'),
(01,4500,'16-02-20'),
(02,3500,'16-06-11');

-- SELECT * FROM BonusT;

CREATE TABLE TitleT(
w_id INT,
WORKER_tITLE CHAR(15),
Affected_Date DATETIME,
FOREIGN KEY (w_id)
REFERENCES Workers(w_id) 
ON DELETE CASCADE
);

INSERT INTO TitleT (w_id,WORKER_tITLE,Affected_Date) VALUES
(01,'MANAGER','2016-02-20 00:00:00'),
(02,'EXECUTIVE','2016-06-11 00:00:00'),
(08,'EXECUTIVE','2016-06-11 00:00:00'),
(05,'MANAGER','2016-06-11 00:00:00'),
(04,'ASST. MANAGER','2016-06-11 00:00:00;'),
(07,'EXECUTIVE','2016-06-11 00:00:00'),
(06,'LEAD','2016-06-11 00:00:00'),
(03,'LEAD','2016-06-11 00:00:00');

-- SELECT * FROM TitleT;

-- QUESTION1SELECTE WORKER F_NAME USING ASLIAS   
-- SELECT f_name AS WORKER_NAME FROM Workers;



-- QUESTION F_NAME OF W IN UPPER CASE

-- SELECT LOWER(f_name) FROM Workers;




-- question 3 
-- fetch Unique Department from table ..... and also using group by

-- SELECT DEPARTMENT FROM Workers GROUP BY DEPARTMENT;
-- SELECT DISTINCT DEPARTMENT FROM Workers;

-- question 4 
-- fetch first 3 character of first name from workers 

-- SELECT substring(f_name,1,3) FROM Workers;



-- Questions 5
-- find position of b in f name colume 'amitabh' from workers table


-- SELECT INSTR(f_name,'b') FROM Workers where f_name ='Amitabh';


-- Question 6
-- write f name from worker trim white space from right side of string 

-- SELECT RTRIM(f_name) from Workers;
-- -- question 7
-- SELECT LTRIM(f_name) FROM Workers;

-- Question 8
-- unique departmates   and lengh of department      

SELECT DISTINCT DEPARTMENT, LENGTH(DEPARTMENT)  FROM Workers;

-- question 9
-- Replacing a with A
-- SELECT REPLACE(f_name,'A','a') FROM Workers;



-- question 10 
-- combine f_name and last name as complete name , a space should be separate them 
-- SELECT CONCAT(f_name,' ',l_name) FROM Workers AS COMPLETE_NAME;




-- QUESTION 11
-- SELECT ALL WORKER DETAILS ORDER BY F_NAME IN ASCENDING ORDER 
-- SELECT * FROM Workers ORDER BY f_name;

-- question 12
-- order by name asc and department desc;

-- SELECT * FROM Workers ORDER BY f_name , DEPARTMENT DESC;

-- QUESTIONS 13
-- PRINT DETAILS OF WORKERS FNAME AS VIPUL AND SATISH

-- SELECT * FROM Workers where f_name IN ('VIPUL','Satis');

-- QUESTIONS 14
-- PRINT DETAILS OF WORKERS EXCLUDING FNAME AS VIPUL AND SATISH

-- SELECT * FROM Workers where f_name NOT IN ('VIPUL','Satis');


-- QUESTIONS 15
-- PRINT DETAILS OF WORKERS DEPARTMENT AS ADMIN

-- SELECT * FROM Workers where DEPARTMENT='ADMIN';

-- SELECT * FROM Workers where DEPARTMENT LIKE 'ADMIN%';

-- question 16
-- worker d whose f name contains a

-- SELECT * FROM Workers where f_name LIKE '%A%';

-- question 17
-- worker d whose f name END WITH a

-- SELECT * FROM Workers WHERE F_NAME LIKE '%A';


-- question 18
-- worker d whose f name END WITH h and contains 6 alphabets .

-- SELECT * FROM Workers where f_name LIKE '_____H';



-- QUESTIONS 19

-- WORKERS DETAILS WHOSE SALARY IN BETWEEN 100K AND 500K
SELECT * FROM Workers where salary BETWEEN 100000 and 500000;


-- question 20
-- who joined in feb 2014

SELECT * FROM Workers where YEAR(joiningDate)=2014 and MONTH(joiningDate)=02;

-- SELECT * FROM TitleT;

-- QUESTION 21 
-- COUNT THE EMPLOOYEES WORKING DEPARTMENT ADMIN
-- SELECT  DEPARTMENT, COUNT(*) AS Count FROM Workers where DEPARTMENT='Admin';


-- QUESTION 22
-- WORKERS FULL NAME WITH SALARIES >=500000 AND <=100000;

-- SELECT  concat(f_name,' ',l_name) FROM Workers where salary between 50000 and 100000;


-- QUESTION 23
-- FETCH NO. OF WORKER FOR EACH DEPARTMENT IN DESCENDING ORDER 

-- SELECT DEPARTMENT, COUNT(w_id) as NO_OF_WORKER FROM Workers GROUP BY DEPARTMENT ORDER BY NO_OF_WORKER DESC;

-- QUESTION 24 
-- FETCH DETAILSOF WORKERS WHO HAS LASO AS MANAGER 
-- SELECT w.* FROM Workers as w INNER JOIN TitleT as t on w.w_id=t.w_id where WORKER_tITLE='MANAGER';

-- QUESTION 25
-- FETCH NO. OF TITLE MORE THAN ONE OF DIFFERENCT TITLE

-- SELECT WORKER_tITLE,COUNT(*) AS count FROM TitleT GROUP BY WORKER_tITLE HAVING count > 1;

-- Question 26
-- show only odd numbers of rows 
-- SELECT * FROM Workers where MOD(w_id,2)!=0;

-- Question 27
-- show only even numbers of rows 

-- SELECT * FROM Workers where MOD(w_id,2)=0;

-- Question 28
-- clone a new table from workers tables 

CREATE TABLE newTable LIKE Workers;
INSERT INTO newTable SELECT * FROM Workers;
-- select * from newTable;

-- Question 29
-- fetch intersecting records of two tables 
-- Inner Join 

SELECT Workers.* FROM Workers inner join newTable ON Workers.w_id=newTable.w_id;
SELECT Workers.* FROM Workers inner join newTable using(w_id);


-- QUESTION 30 
-- QUERY SHOW ONE TABLE THAT ANOTHER TABLE DOES NOT HAVE 
-- minuS

SELECT Workers.* FROM Workers LEFT JOIN newTable using(w_id) where newTable.w_id=null;


-- QUESTION 31 
-- SHOW CURRENCT DATE AND TIME

SELECT CURDATE();
SELECT NOW();

-- QUESTION 32
-- SHOW TOP N RECORDS OF TABLE ORDER BY DESCENDING SALARY

SELECT * FROM Workers ORDER BY SALARY DESC LIMIT 5;

-- QUESTION 33
-- determine nth (n=5) salary from table;
SELECT * FROM Workers ORDER BY SALARY DESC LIMIT 4,1;

-- QUESTION 34
-- DETERMINE 5 TH HIGHEST SALARY WITHOUT USING LIMIT 

SELECT salary FROM Workers as w1 Where 4=(
select count(DISTINCT (w.salary)) FROM Workers as w 
where w.salary >=w1.salary
);

-- QUESTION 35
-- FETCH THE LIST OF EMPLOYEES WITH SAME SALARY

SELECT w.* FROM Workers  w ,Workers  w1 where w.salary=w1.salary and w.w_id !=w1.w_id;

-- QUESTION 36
-- SHOW THE SECOND HIGHEST SALARY FROM S TABLE USING SUB QUERY

SELECT MAX(SALARY) FROM Workers
where salary not in (SELECT MAX(SALARY) FROM Workers);


-- QUESTION 37 
-- Show one rows in twich in table

-- SELECT * FROM Workers
-- UNION ALL
-- SELECT * FROM Workers ORDER BY w_id;


-- QUESTION 38
-- list w_id who does get bonus

SELECT * FROM Workers where w_id not in (SELECT wRef_id FROM BonusT);

-- QUESTION39
-- FIRST 50% RECORDS FROM A TABLE

SELECT * FROM Workers where w_id <= (SELECT COUNT(w_id)/2 FROM Workers);



-- QUESTION 40
-- fetch department that have less than 4 people in it.

SELECT department, count(department) as c FROM Workers group by department having c<4;



-- QUESTION 41
-- fetch department along with number of people in each department .
SELECT department, count(department) as c FROM Workers group by department;


-- QUESTION 42 
-- show last record from table



 SELECT * FROM Workers WHERE w_id=   (Select max(w_id) FROM Workers);
 
 -- QUESTION 43
-- show first record from table

SELECT * FROM Workers WHERE w_id=   (Select min(w_id) FROM Workers);


-- QUESTION 44
-- show fetch the last five records from a table

(SELECT * FROM Workers ORDER BY w_id DESC LIMIT 5) ORDER BY w_id;

-- QUESTION 45 
-- NAME OF EMPLOYYES HAVING HIGHEST SALARY IN EACH DEPARTMENT;

SELECT w.department,w.f_name, w.salary FROM (SELECT DEPARTMENT,MAX(SALARY) as maxS FROM Workers GROUP BY DEPARTMENT) t inner join Workers w on w.department=t.department and t.maxS=w.salary;

-- QUESTION 46 
-- FETCH THREE MAXIMUM SALARY FROM A TABLE USING CO-RELATED SUBQUERY

SELECT DISTINCT(SALARY) FROM Workers  W where 3>=  (SELECT COUNT(DISTINCT(salary))  FROM Workers w2 where w2.salary>=W.salary) ORDER BY W.SALARY DESC;

SELECT DISTINCT(SALARY) FROM Workers  W where 3<=  (SELECT COUNT(DISTINCT(salary))  FROM Workers w2 where w2.salary>=W.salary) ;


